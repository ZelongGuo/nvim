#-------------------------------------------------
# Note you still need the vim-snippets dependency!
#-------------------------------------------------

#=============================
# Python Util #
#=============================

# Fow now, I don't use the context to test the math envirenment because its complexity... Maybe later I can add it here...

# # return bool value about which context we are in now
# global !p
# def math():
#     return vim.eval('vimtex#syntax#in_mathzone()') == '1'
# def comment(): 
#     return vim.eval('vimtex#syntax#in_comment()') == '1'
# def env(name):
#     [x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
#     return x != '0' and y != '0'
# endglobal

# global !p
# texMathZones = ['texMathZone' + x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS',
# 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS',
# 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z', 'AmsA', 'AmsB', 'AmsC',
# 'AmsD', 'AmsE', 'AmsF', 'AmsG', 'AmsAS', 'AmsBS', 'AmsCS', 'AmsDS', 'AmsES',
# 'AmsFS', 'AmsGS' ]]
# 
# texIgnoreMathZones = ['texMathText']
# 
# texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
# texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")
# 
# ignore = texIgnoreMathZoneIds[0]
# 
# def math():
# 	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
# 	try:
# 		first = next(
#             i for i in reversed(synstackids)
#             if i in texIgnoreMathZoneIds or i in texMathZoneIds
#         )
# 		return first != ignore
# 	except StopIteration:
# 		return False
# endglobal


#=============================
# Markdown #
#=============================
# ----------------------------
# Bold visual mode
snippet b "**{text}**" i
**{${1:${VISUAL:text}}}**`:esc`
endsnippet

#=============================
# Math #
#=============================
# ----------------------------
# math inline
snippet mi "Math" i
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

# math outline
snippet mo "Math" w
$$
${1}
$$
${0}
endsnippet

# ----------------------------
snippet / "Fraction" i
\\frac{$1}{$2} $0
endsnippet

snippet == "& =" i
& = ${0}
endsnippet


snippet tag "tag" i
\tag{$1} ${0}
endsnippet

# ----------------------------
snippet l{ "left {" i
\left\\{
\begin{aligned}
	${1}
\end{aligned}
\right.
\tag{${0}}
endsnippet

snippet r{ "right }" i
\left.
\begin{aligned}
	${1}
\end{aligned}
\right\\}
\tag{${0}}
endsnippet

snippet ali "Align" i
\begin{aligned}
	${1}
\end{aligned}
\tag{${0}}
endsnippet

snippet case "Cases" i
\begin{cases}
	${1}
\end{cases}
\tag{${0}}
endsnippet

snippet array "Array" i
\begin{array}
	${1}
\end{array}
\tag{${0}}
endsnippet

# ----------------------------
# matrix
snippet m( "Array ()" i
\begin{pmatrix}
	${1} & ${0}
\end{pmatrix}
endsnippet

snippet m[ "Array []" i
\begin{bmatrix}
	${1} & ${0}
\end{bmatrix}
endsnippet

snippet m{ "Array {}" i
\begin{Bmatrix}
	${1} & ${0}
\end{Bmatrix}
endsnippet

snippet m| "Array ||" i
\begin{vmatrix}
	${1} & ${0}
\end{vmatrix}
endsnippet

# ----------------------------
# some superscripts, like bar, vec etc.
snippet bar "bar" i
\bar{$1} ${0}
endsnippet

snippet hat "hat" i
\hat{$1} ${0}
endsnippet

snippet til "tilde" i
\tilde{$1} ${0}
endsnippet

snippet vec "vector" i
\vec{$1} ${0}
endsnippet

snippet dot "dot" i
\dot{$1} ${0}
endsnippet

# ----------------------------
# some operations and functions
# some operations
snippet ~= "approximation" i
\approx ${0}
endsnippet

snippet neq "not equal" i
\neq ${0}
endsnippet

snippet >= "equal or greater than" i
\geq ${0}
endsnippet

snippet <= "equal or less than" i
\leq ${0}
endsnippet

snippet ll "less less than" i
\ll ${0}
endsnippet

snippet gg "greater greater than" i
\gg ${0}
endsnippet

snippet +- "+-" i
\pm ${0}
endsnippet

snippet cdot "cdot" i
\cdot ${0}
endsnippet

snippet sqrt "sqrt" i
\sqrt{$1} ${0}
endsnippet

snippet sqrtn "sqrtn" i
\sqrt[$1]{$2} ${0}
endsnippet

snippet sum "sum" i
\sum{i=0}{$1} ${0}
endsnippet

# some functions
snippet sin "sin" i
\sin{$1} ${0}
endsnippet

snippet cos "cos" i
\cos{$1} ${0}
endsnippet

snippet tan "tan" i
\tan{$1} ${0}
endsnippet

snippet sec "sec" i
\sec{$1} ${0}
endsnippet

snippet csc "csc" i
\csc{$1} ${0}
endsnippet

snippet cot "cot" i
\cot{$1} ${0}
endsnippet

snippet ln "ln" i
\ln{$1} ${0}
endsnippet

snippet log "log" i
\log_{$1}^{$2}${0}
endsnippet

snippet lg "ln" i
\ln{$1} ${0}
endsnippet

snippet lim "limite" i
\lim_{$1\rightarrow+\infty} ${0}
endsnippet

snippet int "intergration" i
\int_{$1}^{$2} ${0}
endsnippet

snippet ~ "sim" i
\sim ${0}
endsnippet

snippet per "perpendicular" i
\perp ${0}
endsnippet

snippet par "parallel" i
\parallel ${0}
endsnippet


# ----------------------------
# others
snippet bec "because" i
\because ${0}
endsnippet

snippet so "therefore" i
\therefore ${0}
endsnippet

snippet any "for all" i
\forall ${0}
endsnippet

snippet exi "exist" i
\exist ${0}
endsnippet

snippet ra "right arrow" i
\Rightarrow ${0}
endsnippet

snippet la "left arrow" i
\Leftarrow ${0}
endsnippet

snippet lra "left right arrow" i
\Leftrightarrow ${0}
endsnippet

snippet deg "degree" i
^\circ ${0}
endsnippet

# delete lines
snippet can "cancel" i
\cancel{$1}${0}
endsnippet


# ----------------------------
# Greek leters
snippet alp "alpha" i
\alpha${0}
endsnippet

snippet Alp "Alpha" i
\Alpha${0}
endsnippet

snippet bet "beta" i
\beta${0}
endsnippet

snippet Bet "Beta" i
\Beta${0}
endsnippet

snippet gam "gamma" i
\gamma${0}
endsnippet

snippet Gam "Gamma" i
\Gamma${0}
endsnippet

snippet del "delta" i
\delta${0}
endsnippet

snippet Del "Delta" i
\Delta${0}
endsnippet

snippet eps "epsilon" i
\varepsilon ${0}
endsnippet

snippet the "theta" i
\theta${0}
endsnippet

snippet kap "kappa" i
\kappa${0}
endsnippet

snippet lam "lambda" i
\lambda${0}
endsnippet

snippet ita "eta" i
\eta${0}
endsnippet

snippet mu "mu" i
\mu${0}
endsnippet

snippet nu "nu" i
\nu${0}
endsnippet

snippet pi "pi" i
\pi${0}
endsnippet

snippet rho "rho" i
\rho${0}
endsnippet

snippet sig "sigma" i
\sigma${0}
endsnippet

snippet tau "tau" i
\tau${0}
endsnippet

snippet Phi "Phi" i
\phi${0}
endsnippet

snippet phi "phi" i
\varphi${0}
endsnippet

snippet ome "omega" i
\omega${0}
endsnippet



#=============================
# Markdown #
#=============================

#===== for headings and update

# snippet h1 "Heading 1" wb
# <h1>${1:Here is Heading 1}</h1>
# 
# > Zelong Guo, @ GFZ, Potsdam  
# `!v strftime("%Y-%m-%d %H:%M")`  
# 
# $0
# endsnippet
# 
# snippet h2 "Heading 2" wb
# <h2 id="${1}">${2:Here is Heading 2}</h2>
# 
# $0
# endsnippet
# 
# snippet h3 "Heading 3" wb
# <h3 id="${1}">${2:Here is Heading 3}</h3>
# 
# $0
# endsnippet
# 
# snippet h4 "Heading 4" wb
# <h4 id="${1}">${2:Here is Heading 4}</h4>
# 
# $0
# endsnippet
# 
# snippet h5 "Heading 5" wb
# <h5 id="${1}">${2:Here is Heading 5}</h5>
# 
# $0
# endsnippet
# 
# snippet h6 "Heading 6" wb
# <h6 id="${1}">${2:Here is Heading 6}</h6>
# 
# $0
# endsnippet


snippet update "update" w
> update: `!v strftime("%Y-%m-%d %H:%M")`  

$0
endsnippet

#===== for New page and Figures

# only valid when export as PDF or print
snippet newpage "New Page"
<div style="page-break-after: always;"></div>
$0
endsnippet

# snippet table "table" b
# |$1|$2|
# |:-|:-:|
# |$3|$0|
# endsnippet

# snippet deg "degree" w
# &deg;
# endsnippet

# Better to use plugin vim-table-mode and the following snippet
# table, e.g., 43tab<Tab>
snippet '(?<!\\)([0-9])([0-9])tab' "definele" r
$1`!p 
x=match.group(1)
y=match.group(2)
row1=""
row2="" 
for i in range(int(x)):
	# row1+="| "
	# row2+="|:-:"
	row1+="|<++> "
	row2+="|-"
row1+="|\n"
row2+="|\n"
out=row1+row2+int(y)*row1
snip.rv=out
`$0
endsnippet

# snippet box "box" w
# <div class="solid">
# $1
# </div>
# $0
# endsnippet

# vim:ft=snippets

snippet ,b "bold" iA
**${1}**$0
endsnippet

snippet ,i "italic" iA
*${1}*$0
endsnippet

snippet ,d "delete line" iA
~~${1}~~$0
endsnippet

# underline
snippet ,u "delete line" iA
<ins>${1}</ins>$0
endsnippet

snippet ,c "color text" iA
<font size="3"  color="red">${1}</font> ${0}
endsnippet

snippet box "background color text" wb
<table><tr><td bgcolor=white>${1}</td></tr></table> ${0}
endsnippet

snippet ,p "Picture/Figure with title" iA
<center>
<img style="border-radius: 0.2125em;" src="../img/$1" width="$2%" height="auto">
<div style="
display: outline;
font-style: italic;
color: #666;
padding: 2px;">Figure $3 </div>
</center>
$0
endsnippet

snippet ,a "link" iA
[$1]($2)$0 
endsnippet

# # column
# snippet col "link" wb
# <style>
#   .container {
#     column-count: 2;
#     column-width: 200px;
#     column-gap: 20px;
#   }
#   .left {
#     background-color: #ddd;
#   }
#   .right {
#     background-color: #eee;
#   }
# </style>
# <div class="container">
#   <div class="left">
#   <br/>
#   	${1:right column insert here...}
# 
#   </div>
# 
#   <div class="right">
#   <br/>
#   	${2:left column insert here...}
# 
# </div>
# </div>
# 
# ${0}
# endsnippet

snippet col "table" wb
<table>
<tr>
<td width="33%"">
	<++>
</td>
<td width="33%">
	<++>
</td>
<td width="33%">
	<++>
</td>
</tr>
</table>
${0}
endsnippet
